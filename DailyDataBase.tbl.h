//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: Daily表格.xlsm SHEET: Sheet1 KEY: id

#pragma once
#pragma pack(1)
struct DailyDataBase
{
	DWORD getUniqueID() const { return usage_id_hash(id); }

	DWORD id; // id
	DWORD times; // 次数
	DWORD minLevel; // 最低等级
	DWORD maxLevel; // 最高等级
	WORD startTime; // 开始时间
	WORD endTime; // 结束时间
	BYTE isTeam; // 组队
	DWORD activeValue; // 单次活跃奖励
};
#pragma pack()

#if false
namespace table
{
	// Daily表格
	struct zDailyDataBaseEntry : public zEntry
	{
		DWORD id; // id
		DWORD times; // 次数
		DWORD minLevel; // 最低等级
		DWORD maxLevel; // 最高等级
		WORD startTime; // 开始时间
		WORD endTime; // 结束时间
		BYTE isTeam; // 组队
		DWORD activeValue; // 单次活跃奖励

		virtual const char* getClassName() const { return "Daily表格"; }
		static const char* getFileName() { return "DailyDataBase.tbl"; }
		void fill(const DailyDataBase& base)
		{
			this->id = base.getUniqueID();

			this->id = base.id;
			this->times = base.times;
			this->minLevel = base.minLevel;
			this->maxLevel = base.maxLevel;
			this->startTime = base.startTime;
			this->endTime = base.endTime;
			this->isTeam = base.isTeam;
			this->activeValue = base.activeValue;
		}
		void reset()
		{
			this->id = 0;
			this->times = 0;
			this->minLevel = 0;
			this->maxLevel = 0;
			this->startTime = 0;
			this->endTime = 0;
			this->isTeam = 0;
			this->activeValue = 0;
		}
	};
	typedef zDataBM<zDailyDataBaseEntry, DailyDataBase> DailyDataBaseManager;
}
#endif

