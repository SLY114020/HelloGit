//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// FILE: Arena武斗场.xlsx SHEET: 每次挑战奖励 KEY: id

#pragma once
#pragma pack(1)
struct ArenaChallengeReward
{
	DWORD getUniqueID() const { return usage_id_hash(id); }

	DWORD id; // ID
	DWORD level_cap; // 等级上限
	DWORD level_floor; // 等级下限
	DWORD win_score_reward; // 胜利积分奖励
	DWORD lose_score_reward; // 失败积分奖励
};
#pragma pack()

#if false
namespace table
{
	// Arena武斗场
	struct zArenaChallengeRewardEntry : public zEntry
	{
		DWORD id; // ID
		DWORD level_cap; // 等级上限
		DWORD level_floor; // 等级下限
		DWORD win_score_reward; // 胜利积分奖励
		DWORD lose_score_reward; // 失败积分奖励

		virtual const char* getClassName() const { return "Arena武斗场"; }
		static const char* getFileName() { return "ArenaChallengeReward.tbl"; }
		void fill(const ArenaChallengeReward& base)
		{
			this->id = base.getUniqueID();

			this->id = base.id;
			this->level_cap = base.level_cap;
			this->level_floor = base.level_floor;
			this->win_score_reward = base.win_score_reward;
			this->lose_score_reward = base.lose_score_reward;
		}
		void reset()
		{
			this->id = 0;
			this->level_cap = 0;
			this->level_floor = 0;
			this->win_score_reward = 0;
			this->lose_score_reward = 0;
		}
	};
	typedef zDataBM<zArenaChallengeRewardEntry, ArenaChallengeReward> ArenaChallengeRewardManager;
}
#endif

